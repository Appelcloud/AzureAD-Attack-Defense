let Token_EntityToAlertSignInRequest = (Entity:string="") {
    let Lookback = 90d;
    let RequestRelatedAlerts = (
        SecurityAlert
            | where Entities has (Entity)
            | where TimeGenerated >ago(Lookback)
            | mv-expand parse_json(Entities)
            | where Entities.Type == "cloud-logon-request"
            | summarize arg_max(TimeGenerated, *) by SystemAlertId
            // Optional: Filter for resolved events only
            //| where Status != "Resolved"
            | project SignInAlertTime = TimeGenerated, OriginalRequestId = tostring(parse_json(ExtendedProperties).["Request Id"]), AlertName, Status, SystemAlertId, tostring(Tactics), tostring(Techniques), tostring(Entities), RequestId = tostring(Entities.RequestId)
        );
    let AssociatedSignIns = RequestRelatedAlerts
    | join kind=inner ( 
            union SigninLogs, AADNonInteractiveUserSignInLogs
            | where TimeGenerated >ago(Lookback)
            | extend SignInTime = TimeGenerated, AppId, ResourceId, RequestId = OriginalRequestId, CorrelationId, IPAddress, Application = AppDisplayName, ResourceDisplayName, AccountObjectId = UserId, AccountDisplayName = UserDisplayName, UniqueTokenIdentifier
        ) on RequestId;
    AssociatedSignIns
        | extend SignIns = bag_pack_columns(SignInTime, Application, AppId, ResourceId, ResourceDisplayName, IPAddress, CorrelationId, UniqueTokenIdentifier)
        | extend SignInAlert = bag_pack_columns(SignInAlertTime, SystemAlertId, AlertName, Status, Tactics, Techniques, Entities)
        | summarize SignInActivityStart=min(SignInTime), SignInActivityEnd=max(SignInTime), SignIns = make_set(SignIns), SignInAlerts = make_set(SignInAlert), OriginalRequestIds = make_set(OriginalRequestId) by AccountObjectId, RequestId
};
Token_EntityToAlertSignInRequest(Entity)